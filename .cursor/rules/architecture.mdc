---
description: 
globs: 
alwaysApply: false
---
# Gladiator Codebase Documentation (.cursor-rules)

This file provides an overview of the codebase structure, key components, and their interactions within the Gladiator project, specifically focusing on the 1v1 FPS game module.

## Overall Architecture

*   **Monorepo Structure:** The project uses a monorepo structure (likely managed by pnpm).
    *   `packages/`: Contains reusable libraries and game server logic.
        *   `shared-types`: Defines shared data structures and constants.
        *   `game-server-fps`: Houses the dedicated Node.js server for the FPS game.
    *   `apps/`: Contains deployable applications.
        *   `web`: A Next.js application serving the web interface and the FPS client component.
*   **Client-Server Model:**
    *   **Client:** React component (`apps/web/components/games/fps/GameViewFPS.jsx`) using Three.js (rendering), RapierJS (client physics), Socket.IO (networking).
    *   **Server:** Node.js process (`packages/game-server-fps/src/gameInstance_fps.js`) using RapierJS (authoritative physics), Socket.IO (networking), managing game state and rules.
*   **Platform Integration (Planned):** Designed for integration with matchmaking, server management, Solana blockchain (escrow, profiles), and platform APIs.

---

## 1. Shared Types (`packages/shared-types`)

*   **Location:** `packages/shared-types/src/game-fps.js`
*   **Purpose:** Defines common data structures, constants, enums, and message types for client-server communication and configuration.
*   **Key Definitions:**
    *   **Enums/Constants:** `GrenadeType`, `AbilityType`, `CharacterId`, `MapId`.
    *   **Configuration Structs:** `WeaponConfigFPS`, `GrenadeConfigFPS`, `AbilityConfigFPS`, `CharacterConfigFPS`, `MapPhysicsDataFPS`, `MapConfigFPS`. Loaded by both client and server.
    *   **Network State/Payloads:**
        *   `PlayerInputFPS`: Client -> Server input structure (keys, look, actions, sequence).
        *   `PlayerStateFPS`: Authoritative server state per player (physics, health, shield, ammo, cooldowns, grapple state, etc.).
        *   `GameStateFPS`: Main broadcast state (map, match state, timers, round wins, all player states).
    *   **Message Types (`MessageTypeFPS`):** Identifiers for Socket.IO events (e.g., `PLAYER_INPUT_FPS`, `GAME_STATE_FPS`, action requests, event broadcasts).

---

## 2. FPS Game Server Instance (`packages/game-server-fps`)

*   **Location:** `packages/game-server-fps/src/gameInstance_fps.js`
*   **Purpose:** Runs the authoritative simulation for a single 1v1 FPS match. Manages state, physics, rules, and communication.
*   **Core Logic:**
    *   **Initialization (`initialize`, etc.):**
        *   Parses args (`yargs`): port, matchId, mapId, player IDs/charIds, Solana info.
        *   Initializes Rapier world (`RAPIER.World`).
        *   Loads map physics based on `mapId` and `MapConfigFPS`.
        *   Initializes `players` state object based on `charId`s and `CharacterConfigFPS`.
        *   Starts Socket.IO server.
        *   Reports 'READY' to Game Server Manager (IPC/API).
    *   **Client Connection Handling (`io.on('connection', ...)`):**
        *   Associates sockets with player IDs (Needs Auth).
        *   Sends initial `GameStateFPS` to connecting clients.
        *   Handles disconnects.
        *   Listens for client messages (`MessageTypeFPS`).
    *   **Action Handling (Socket Listeners for `MessageTypeFPS`):**
        *   Handles client requests for movement, shooting, weapon switch, reload, grenade throw, ability use, grapple fire/release.
        *   **Performs server-side validation** for all actions (ammo, cooldowns, state, range, LoS, etc.) using authoritative state before execution.
        *   Applies changes to authoritative state (e.g., decrements ammo, starts cooldowns, creates physics objects).
        *   Broadcasts state changes and specific events.
    *   **Game Loop (`setInterval` likely):**
        *   Advances Rapier physics (`rapierWorld.step()`).
        *   Processes inputs, updates physics state.
        *   Handles grenade/grapple physics.
        *   Manages timers (round, cooldowns, durations).
        *   Checks game conditions (round/match end).
        *   Broadcasts `GameStateFPS` (ideally delta-compressed).
    *   **Physics & Damage (`applyDamage`, `processHit`, etc.):**
        *   Server-authoritative hit processing using lag compensation.
        *   Damage applied to shield then health.
        *   Handles death and respawn (using map spawn points, resetting state including ammo/grenades/cooldowns).
    *   **State Management:** Holds `config`, `rapierWorld`, `io`, `players` state map, `activeGrenades`, `currentMatchState`.
    *   **Platform Interaction (Planned):** Solana calls (`release_escrow`), result reporting.
    *   **Shutdown (`shutdown`):** Cleans up resources.
*   **Metrics:** `packages/game-server-fps/src/metrics.js` (Likely placeholders).

---

## 3. FPS Client Component (`apps/web`)

*   **Location:** `apps/web/components/games/fps/GameViewFPS.jsx`
*   **Purpose:** Renders the game, handles input, predicts state, connects to server, synchronizes.
*   **Core Logic:**
    *   **Props:** Receives connection info, match config (`mapId`, `charId`s).
    *   **State (`useState`):** `isLoading`, `connectionStatus`, `currentGameState`, `isThirdPersonView`.
    *   **Refs (`useRef`):** `canvasRef`, `socketRef`, `inputStateRef`, animation refs.
    *   **Initialization (`useEffect` hook):**
        *   Sets up Three.js (renderer, scene, camera, lighting).
        *   Loads assets (`GLTFLoader`): Map GLB, shared Character GLB (cloned), FPV weapon GLBs.
        *   Initializes client RapierJS world, loads map physics colliders.
        *   Sets up input event listeners (keyboard, mouse, pointer lock).
        *   Connects to server via Socket.IO (`connectToServer`).
        *   Starts render loop (`requestAnimationFrame`).
    *   **Connection Handling:** Connects to server, handles events (`connect`, `disconnect`, `connect_error`), retries. Listens for `GAME_STATE_FPS` and other server events, updating `currentGameState` or triggering effects.
    *   **Input Handling:** Updates `inputStateRef` (keys, lookQuat). Sends `PLAYER_INPUT_FPS` periodically. Sends specific action messages (`THROW_GRENADE_FPS`, etc.) on key press, providing immediate feedback (animations, sounds).
    *   **Render Loop (`render` function):**
        *   **Client Prediction:** Applies local input to local Rapier body.
        *   Steps client physics world.
        *   **State Sync/Reconciliation:** Corrects local player state based on `currentGameState` from server and `lastProcessedSequence`, re-simulates pending inputs.
        *   **Interpolation:** Smooths remote player visuals based on buffered server states.
        *   **Update Visuals:** Updates Three.js mesh transforms from Rapier bodies/interpolation. Updates animations. Updates camera. Updates FPV weapon visibility/animations. Updates grapple rope visual.
        *   **Rendering:** Renders main scene and FPV overlay.
    *   **Cleanup (`useEffect` return):** Disconnects socket, removes listeners, disposes Three.js/Rapier resources.

---
## 4. System Connections & Hierarchy

*   **Monorepo:** Linked packages (`shared-types` used by `game-server-fps` and `apps/web`).
*   **Server Launch:** External manager starts `gameInstance_fps.js`. Instance reports readiness.
*   **Client Launch:** `GameViewFPS.jsx` rendered in Next.js app, receives props.
*   **Communication:** Socket.IO for client <-> server messages (`MessageTypeFPS`).
*   **Physics:** RapierJS on both client (prediction) and server (authority).
*   **Rendering:** Three.js on client.
*   **State Authority:** **Server (`gameInstance_fps.js`) is the source of truth.** Client predicts and reconciles. 
